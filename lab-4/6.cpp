#include <iostream>
#include <string>
using namespace std;

class PurchaseInvoice {
	private:
		string itemCode;
		string itemDescription;
		int itemQuantity;
		double unitPrice;
	public:
		PurchaseInvoice(){
			itemCode = "";
			itemDescription = "";
			itemQuantity = 0;
			unitPrice = 0.0;
		}
		PurchaseInvoice(string code, string description, int quantity, double price){
			itemCode = code;
			itemDescription = description;
			setQuantity(quantity);
			setUnitPrice(price);
		}

		void setItemCode(string code) {
			itemCode = code;
		}
		string getItemCode() const {
			return itemCode;
		}

		void setItemDescription(string description) {
			itemDescription = description;
		}
		string getItemDescription() const {
			return itemDescription;
		}

		void setQuantity(int quantity) {
			if (quantity > 0) {
				itemQuantity = quantity;
			} else {
				itemQuantity = 0; 
			}
		}
		int getQuantity() const {
			return itemQuantity;
		}

		void setUnitPrice(double price) {
			if (price > 0.0) {
				unitPrice = price;
			} else {
				unitPrice = 0.0;
			}
		}
		double getUnitPrice() const {
			return unitPrice;
		}

		double calculateTotalCost() const {
			return itemQuantity * unitPrice;
		}
};

int main() {
    // sample input generated by Ai
    
	PurchaseInvoice invoice("TP-5678", "Torque Wrench", 7, 15.99);

    cout << "Item Code: " << invoice.getItemCode() << endl;
    cout << "Item Description: " << invoice.getItemDescription() << endl;
    cout << "Quantity: " << invoice.getQuantity() << endl;
    cout << "Unit Price: $" << invoice.getUnitPrice() << endl;
    cout << "Total Invoice Cost: $" << invoice.calculateTotalCost() << endl;

    invoice.setQuantity(-4); 
    invoice.setUnitPrice(-6.5); 
    cout << "\nAfter Assigning Invalid Values:" << endl;
    cout << "Quantity: " << invoice.getQuantity() << endl;
    cout << "Unit Price: $" << invoice.getUnitPrice() << endl;
    cout << "Total Invoice Cost: $" << invoice.calculateTotalCost() << endl;

    return 0;
}